{{- if .Values.global.crdInstall.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "crdInstall" . }}
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    # create hook dependencies in the right order
    "helm.sh/hook-weight": "-11"
    {{- include "crdInstallAnnotations" . | nindent 4 }}
  labels:
    {{- include "labels.crdSelector" . | nindent 4 }}
    role: {{ include "crdInstallSelector" . | quote }}
spec:
  template:
    metadata:
      labels:
        {{- include "labels.crdSelector" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "crdInstall" . }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 2000
        {{- with .Values.podSecurityContext }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        effect: NoSchedule
        operator: Exists
      volumes:
{{ $currentScope := . }}
{{- range $path, $_ := .Files.Glob "files/**" }}
    {{- with $currentScope }}
      - name: {{ $path | base | trimSuffix ".yaml" }}
        configMap:
          name: {{ include "crdInstall" . }}-{{ $path | base | trimSuffix ".yaml" }}
          items:
          - key: content
            path: {{ $path | base }}
{{- end }}
{{- end }}
{{ $currentScope := . }}
{{- range $path, $_ := .Files.Glob "polex/**" }}
    {{- with $currentScope }}
      - name: {{ $path | base | trimSuffix ".yaml" }}
        configMap:
          name: {{ include "crdInstall" . }}-{{ $path | base | trimSuffix ".yaml" }}
          items:
          - key: content
            path: {{ $path | base }}
{{- end }}
{{- end }}
      initContainers:
      - name: install-crds
        image: "{{ .Values.global.crdInstall.kubectl.registry }}/{{ .Values.global.crdInstall.kubectl.image }}:{{ .Values.global.crdInstall.kubectl.tag }}"
        command:
        - sh
        args:
        - -c
        - |
          set -o errexit ; set -o xtrace ; set -o nounset
          # piping stderr to stdout means kubectl's errors are surfaced
          # in the pod's logs.
          kubectl apply -f /data/ 2>&1
        securityContext:
          readOnlyRootFilesystem: true
          {{- with .Values.containerSecurityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
        volumeMounts:
{{- range $path, $_ := .Files.Glob "files/**" }}
        - name: {{ $path | base | trimSuffix ".yaml" }}
          mountPath: /data/{{ $path | base }}
          subPath: {{ $path | base }}
{{- end }}
      containers:
      - name: create-in-cluster-ip-pool
        image: "{{ .Values.global.crdInstall.kubectl.registry }}/{{ .Values.global.crdInstall.kubectl.image }}:{{ .Values.global.crdInstall.kubectl.tag }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          readOnlyRootFilesystem: true
          {{- with .Values.containerSecurityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
        volumeMounts:
{{- range $path, $_ := .Files.Glob "polex/**" }}
        - name: {{ $path | base | trimSuffix ".yaml" }}
          mountPath: /data/{{ $path | base }}
          subPath: {{ $path | base }}
{{- end }}
        command:
        - sh
        args:
        - -c
        - |
          set -o nounset
          for i in $(seq 20)
          do
            kubectl apply -f /data/ 2>&1 && exit 0
            _sec=$(echo "1.5^$i" | bc)
            echo "Waiting ${_sec} seconds.."
            sleep ${_sec}
          done
          exit 1
        {{- with .Values.containerSecurityContext }}
        securityContext:
          {{- . | toYaml | nindent 10 }}
        {{- end }}
      restartPolicy: Never
  backoffLimit: 10
{{- end }}
